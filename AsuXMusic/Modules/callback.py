import yt_dlp
from pyrogram import Client, filters
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from youtubesearchpython import VideosSearch

from AsuX.inline import menu_markup, song_download_markup, stream_markup
from AsuX.queues import QUEUE
from AsuXMusic import BOT_NAME, BOT_USERNAME, F_OWNER
from AsuXMusic import bot as Client
from AsuXMusic.config import GROUP_SUPPORT, UPDATES_CHANNEL


def ytsearch(query):
    try:
        search = VideosSearch(query, limit=1).result()
        data = search["result"][0]
        songname = data["title"]
        url = data["link"]
        duration = data["duration"]
        thumbnail = f"https://i.ytimg.com/vi/{data['id']}/hqdefault.jpg"
        videoid = data["id"]
        return [songname, url, duration, thumbnail, videoid]
    except Exception as e:
        print(e)
        return 0


@Client.on_inline_query()
async def inline(client: Client, query: InlineQuery):
    answerss = [
        InlineQueryResultArticle(
            title="·¥ò·¥Ä·¥ús·¥á s·¥õ Ä·¥á·¥Ä·¥ç",
            description=f"·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ü·¥Ä è·¥è·¥ú·¥õ ·¥è…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü.",
            thumb_url="https://te.legra.ph/file/c0a1c789def7b93f13745.png",
            input_message_content=InputTextMessageContent("/pause"),
        ),
        InlineQueryResultArticle(
            title=" Ä·¥ás·¥ú·¥ç·¥á s·¥õ Ä·¥á·¥Ä·¥ç",
            description=f" Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ ·¥ò ü·¥Ä è·¥è·¥ú·¥õ ·¥è…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü.",
            thumb_url="https://te.legra.ph/file/02d1b7f967ca11404455a.png",
            input_message_content=InputTextMessageContent("/resume"),
        ),
        InlineQueryResultArticle(
            title="·¥ç·¥ú·¥õ·¥á s·¥õ Ä·¥á·¥Ä·¥ç",
            description=f"·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ ·¥ò ü·¥Ä è·¥è·¥ú·¥õ ·¥è…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü.",
            thumb_url="https://te.legra.ph/file/66516f2976cb6d87e20f9.png",
            input_message_content=InputTextMessageContent("/mute"),
        ),
        InlineQueryResultArticle(
            title="·¥ú…¥·¥ç·¥ú·¥õ·¥á s·¥õ Ä·¥á·¥Ä·¥ç",
            description=f"·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ ·¥ò ü·¥Ä è·¥è·¥ú·¥õ ·¥è…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü.",
            thumb_url="https://te.legra.ph/file/3078794f9341ffd582e18.png",
            input_message_content=InputTextMessageContent("/unmute"),
        ),
        InlineQueryResultArticle(
            title="s·¥ã…™·¥ò s·¥õ Ä·¥á·¥Ä·¥ç",
            description=f"s·¥ã…™·¥ò ·¥õ·¥è …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã. | “ì·¥è Ä s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ ·¥õ Ä·¥Ä·¥Ñ·¥ã …¥·¥ú·¥ç ô·¥á Ä: /skip […¥·¥ú·¥ç ô·¥á Ä] ",
            thumb_url="https://te.legra.ph/file/98b88e52bc625903c7a2f.png",
            input_message_content=InputTextMessageContent("/skip"),
        ),
        InlineQueryResultArticle(
            title="·¥á…¥·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç",
            description="s·¥õ·¥è·¥ò ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ ·¥ò ü·¥Ä è·¥è·¥ú·¥õ ·¥è…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü.",
            thumb_url="https://te.legra.ph/file/d2eb03211baaba8838cc4.png",
            input_message_content=InputTextMessageContent("/stop"),
        ),
    ]
    search_query = query.query.lower().strip().rstrip()

    if search_query == "":
        await client.answer_inline_query(
            query.id,
            results=answerss,
            switch_pm_text="·¥õ è·¥ò·¥á ·¥õ ú·¥á …¥·¥Ä·¥ç·¥á ·¥è“ì ·¥õ ú·¥á s·¥è…¥…¢/·¥†…™·¥Ö·¥á·¥è  è·¥è·¥ú·¥õ·¥ú ô·¥á...",
            switch_pm_parameter="help",
            cache_time=0,
        )


@Client.on_callback_query(filters.regex("cbstart"))
async def cbstart(_, query: CallbackQuery):
    await query.edit_message_text(
        f""" ú·¥á è ,·¥ç è …¥·¥Ä·¥ç·¥á …™s {BOT_NAME}.

‡πè ·¥Ä “ì·¥Äs·¥õ ·¥Ä…¥·¥Ö ·¥©·¥è·¥°·¥á Ä“ì·¥ú ü ·¥ç·¥ús…™·¥Ñ ·¥© ü·¥Ä è·¥á Ä  ô·¥è·¥õ ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥Ä·¥°·¥ás·¥è·¥ç·¥á “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.
‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ú·¥á ü·¥©  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.
        """,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥©",
                        url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
                    ),
                ],
                [
                    InlineKeyboardButton(text="‚ùÑ  ú·¥á ü·¥© ‚ùÑ", callback_data="cbbasic"),
                    InlineKeyboardButton(text="ü•Ä ·¥è·¥°…¥·¥á Ä ü•Ä", user_id=F_OWNER),
                ],
                [
                    InlineKeyboardButton(
                        text="‚ú® s·¥ú·¥©·¥©·¥è Ä·¥õ ‚ú®", url=f"https://t.me/{GROUP_SUPPORT}"
                    ),
                    InlineKeyboardButton(
                        text="üíò ·¥Ñ ú·¥Ä…¥…¥·¥á ü üíò", url=f"https://t.me/{UPDATES_CHANNEL}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="‚òÅ s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á ‚òÅ",
                        url="https://t.me/Lokesh_dausa",
                    )
                ],
            ]
        ),
        disable_web_page_preview=True,
    )


@Client.on_callback_query(filters.regex("cbbasic"))
async def cbbasic(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""‚ÑπÔ∏è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ç·¥á…¥·¥ú

ü§∑ ¬ª /id - ·¥õ·¥è …¢·¥á·¥õ ·¥ús·¥á Ä …™·¥Ö

ü§∑ ¬ª /play - ·¥õ è·¥ò·¥á ·¥õ ú…™s ·¥°…™·¥õ ú …¢…™·¥†·¥á ·¥õ ú·¥á s·¥è…¥…¢ ·¥õ…™·¥õ ü·¥á ·¥è Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ã ·¥è Ä ·¥Ä·¥ú·¥Ö…™·¥è “ì…™ ü·¥á ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ. (Remember to don't play YouTube live stream by using this command!, because it will cause unforeseen problems.)

ü§∑ ¬ª /pause - ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ü·¥Ä è·¥è·¥ú·¥õ ·¥è…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü ü

ü§∑ ¬ª /skip - ·¥õ·¥è s·¥ã…™·¥ò ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥è…¥…¢

ü§∑ ¬ª /repo - ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á  Ä·¥á·¥ò·¥è

üôã ¬ª /end - ·¥õ·¥è end ·¥ò ü·¥Ä è s·¥è…¥…¢ …™…¥ ·¥†·¥Ñ.""",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("…¢·¥è  ô·¥Ä·¥Ñ·¥ã üè°", callback_data="cbstart")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbmenu"))
async def cbmenu(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    user_id = query.message.from_user.id
    buttons = menu_markup(user_id)
    if chat_id in QUEUE:
        await query.answer("·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥ò·¥Ä…¥·¥á ü ·¥è·¥ò·¥á…¥·¥á·¥Ö")
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_callback_query(filters.regex("cbdown"))
async def cbdown(_, CallbackQuery):
    await CallbackQuery.answer()
    callback_data = CallbackQuery.data.strip()
    callback_request = callback_data.split(None, 1)[1]
    userid = CallbackQuery.from_user.id
    videoid, user_id = callback_request.split("|")
    buttons = song_download_markup(videoid)
    await CallbackQuery.edit_message_reply_markup(
        reply_markup=InlineKeyboardMarkup(buttons)
    )


@Client.on_callback_query(filters.regex(pattern=r"song_back"))
async def songs_back_helper(client, CallbackQuery):
    callback_data = CallbackQuery.data.strip()
    callback_request = callback_data.split(None, 1)[1]
    userid = CallbackQuery.from_user.id
    videoid, user_id = callback_request.split("|")
    buttons = song_download_markup(videoid)
    return await CallbackQuery.edit_message_reply_markup(
        reply_markup=InlineKeyboardMarkup(buttons)
    )


@Client.on_callback_query(filters.regex(pattern=r"gets"))
async def song_helper_cb(client, CallbackQuery):
    callback_data = CallbackQuery.data.strip()
    callback_request = callback_data.split(None, 1)[1]
    userid = CallbackQuery.from_user.id
    videoid, user_id = callback_request.split("|")
    try:
        await CallbackQuery.answer("soon", show_alert=True)
    except:
        pass
    if stype == "audio":
        try:
            formats_available, link = await YouTube.formats(videoid, True)
        except:
            return await CallbackQuery.edit_message_text("·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä·¥ú·¥Ö…™·¥è")
        keyboard = InlineKeyboard()
        done = []
        for x in formats_available:
            check = x["format"]
            if "audio" in check:
                if x["filesize"] is None:
                    continue
                form = x["format_note"].title()
                if form not in done:
                    done.append(form)
                else:
                    continue
                sz = convert_bytes(x["filesize"])
                fom = x["format_id"]
                keyboard.row(
                    InlineKeyboardButton(
                        text=f"{form} «´·¥ú·¥Ä ü…™·¥õ è ·¥Ä·¥ú·¥Ö…™·¥è = {sz}",
                        callback_data=f"song_download {stype}|{fom}|{videoid}",
                    ),
                )
        keyboard.row(
            InlineKeyboardButton(
                text="üîô  ô·¥Ä·¥Ñ·¥ã",
                callback_data=f"song_back {stype}|{videoid}",
            ),
            InlineKeyboardButton(text="‚úñÔ∏è ·¥Ñ ü·¥ès·¥á ", callback_data=f"cls"),
        )
        return await CallbackQuery.edit_message_reply_markup(reply_markup=keyboard)
    else:
        try:
            formats_available, link = await YouTube.formats(videoid, True)
        except Exception as e:
            print(e)
            return await CallbackQuery.edit_message_text("·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥†…™·¥Ö·¥á·¥è")
        keyboard = InlineKeyboard()
        done = [160, 133, 134, 135, 136, 137, 298, 299, 264, 304, 266]
        for x in formats_available:
            check = x["format"]
            if x["filesize"] is None:
                continue
            if int(x["format_id"]) not in done:
                continue
            sz = convert_bytes(x["filesize"])
            ap = check.split("-")[1]
            to = f"{ap} = {sz}"
            keyboard.row(
                InlineKeyboardButton(
                    text=to,
                    callback_data=f"song_download {stype}|{x['format_id']}|{videoid}",
                )
            )
        keyboard.row(
            InlineKeyboardButton(
                text="üîô  ô·¥Ä·¥Ñ·¥ã",
                callback_data=f"song_back {stype}|{videoid}",
            ),
            InlineKeyboardButton(text="‚úñÔ∏è ·¥Ñ ü·¥ès·¥á", callback_data=f"cls"),
        )
        return await CallbackQuery.edit_message_reply_markup(reply_markup=keyboard)


@Client.on_callback_query(filters.regex(pattern=r"song_download"))
async def song_download_cb(client, CallbackQuery):
    try:
        await CallbackQuery.answer("·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢")
    except:
        pass
    callback_data = CallbackQuery.data.strip()
    callback_request = callback_data.split(None, 1)[1]
    stype, format_id, videoid = callback_request.split("|")
    mystic = await CallbackQuery.edit_message_text(_["song_8"])
    yturl = f"https://www.youtube.com/watch?v={vidid}"
    with yt_dlp.YoutubeDL({"quiet": True}) as ytdl:
        x = ytdl.extract_info(yturl, download=False)
    title = (x["title"]).title()
    title = re.sub("\W+", " ", title)
    thumb_image_path = await CallbackQuery.message.download()
    duration = x["duration"]
    if stype == "video":
        thumb_image_path = await CallbackQuery.message.download()
        width = CallbackQuery.message.photo.width
        height = CallbackQuery.message.photo.height
        try:
            file_path = await YouTube.download(
                yturl,
                mystic,
                songvideo=True,
                format_id=format_id,
                title=title,
            )
        except Exception as e:
            return await mystic.edit_text("error".format(e))
        med = InputMediaVideo(
            media=file_path,
            duration=duration,
            width=width,
            height=height,
            thumb=thumb_image_path,
            caption=title,
            supports_streaming=True,
        )
        await mystic.edit_text("video")
        await app.send_chat_action(
            chat_id=CallbackQuery.message.chat.id,
            action="upload_video",
        )
        try:
            await CallbackQuery.edit_message_media(media=med)
        except Exception as e:
            print(e)
            return await mystic.edit_text("s·¥è·¥è…¥·¥†…™·¥Ö·¥á·¥è")
        os.remove(file_path)
    elif stype == "audio":
        try:
            filename = await YouTube.download(
                yturl,
                mystic,
                songaudio=True,
                format_id=format_id,
                title=title,
            )
        except Exception as e:
            return await mystic.edit_text("error".format(e))
        med = InputMediaAudio(
            media=filename,
            caption=title,
            thumb=thumb_image_path,
            title=title,
            performer=x["uploader"],
        )
        await mystic.edit_text("audio")
        await app.send_chat_action(
            chat_id=CallbackQuery.message.chat.id,
            action="upload_audio",
        )
        try:
            await CallbackQuery.edit_message_media(media=med)
        except Exception as e:
            print(e)
            return await mystic.edit_text("s·¥è·¥è…¥·¥Ä·¥ú·¥Ö…™·¥è")
        os.remove(filename)


@Client.on_callback_query(filters.regex("cbhome"))
async def cbhome(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    user_id = query.message.from_user.id
    buttons = stream_markup(user_id, dlurl)
    if chat_id in QUEUE:
        await query.answer("Back")
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_callback_query(filters.regex("cls"))
async def close(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    await query.message.delete()
